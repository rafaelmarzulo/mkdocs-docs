#!/usr/bin/env python3
"""
Gerador de √çndices Melhorado - MkDocs
Gera automaticamente os arquivos index.md para todos os diret√≥rios
Integrado com a automa√ß√£o do painel FastAPI
"""

import os
import sys
from pathlib import Path
from datetime import datetime

# Configura√ß√µes
DOCS_DIR = "docs"
INTRO_DOCUMENTACAO = """# üìÑ Guia de Documenta√ß√£o Interna

Bem-vindo ao sistema de documenta√ß√£o interna da empresa. Este guia oferece instru√ß√µes, boas pr√°ticas e informa√ß√µes essenciais para o uso, manuten√ß√£o e atualiza√ß√£o dos documentos t√©cnicos e operacionais utilizados pela organiza√ß√£o.

Nosso objetivo √© garantir que todos os colaboradores tenham acesso f√°cil, claro e organizado √†s informa√ß√µes necess√°rias para suas atividades di√°rias, assegurando a padroniza√ß√£o e a qualidade dos processos internos.

---
"""

# Configura√ß√µes espec√≠ficas por diret√≥rio
DIRETORIOS_CONFIG = {
    "apis": {
        "titulo": "üîå Integra√ß√µes via API",
        "descricao": "Aqui est√£o documentadas as APIs dispon√≠veis para integra√ß√£o com os sistemas internos da DTI.\n\nInclui exemplos de requisi√ß√µes, tokens, autentica√ß√£o e boas pr√°ticas de uso.",
        "incluir_intro": False
    },
    "documentacao": {
        "titulo": "üìÑ Guia de Documenta√ß√£o Interna", 
        "descricao": "",
        "incluir_intro": True
    },
    "instalacao": {
        "titulo": "‚öôÔ∏è Guia de Instala√ß√£o",
        "descricao": "Guia de instala√ß√£o e configura√ß√£o de sistemas.\n\nInstru√ß√µes passo a passo para setup e configura√ß√£o dos sistemas da DTI.",
        "incluir_intro": False
    },
    "usuario-final": {
        "titulo": "üë§ Documenta√ß√£o do Usu√°rio Final",
        "descricao": "Manuais e guias para usu√°rios finais dos sistemas.\n\nInstru√ß√µes de uso, tutoriais e resolu√ß√£o de problemas comuns.",
        "incluir_intro": False
    },
    "visao-geral": {
        "titulo": "üîç Vis√£o Geral",
        "descricao": "Informa√ß√µes gerais sobre os sistemas da DTI.\n\nVis√£o geral da arquitetura, tecnologias e processos utilizados.",
        "incluir_intro": False
    }
}

SVG_DOC = """<svg width="32" height="32" viewBox="0 0 20 20" fill="#1976d2" style="vertical-align:middle;"><path d="M4 2h9l5 5v11a2 2 0 01-2 2H4a2 2 0 01-2-2V4a2 2 0 012-2z"/><path d="M13 2v6h6"/></svg>"""

def log_info(mensagem):
    """Log com timestamp"""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    print(f"[{timestamp}] {mensagem}")

def obter_titulo_arquivo(nome_arquivo):
    """
    Converte nome do arquivo em t√≠tulo formatado
    Exemplo: minha_api_rest.md -> Minha Api Rest
    """
    nome = nome_arquivo.replace('.md', '')
    # Substituir underscores e h√≠fens por espa√ßos
    nome = nome.replace('_', ' ').replace('-', ' ')
    # Capitalizar cada palavra
    return nome.title()

def gerar_index_md(diretorio_path, config):
    """
    Gera o arquivo index.md para um diret√≥rio espec√≠fico
    """
    try:
        # Listar arquivos .md v√°lidos
        arquivos = []
        for arquivo in os.listdir(diretorio_path):
            if (arquivo.endswith('.md') and 
                not arquivo.startswith('index') and 
                '_old' not in arquivo and 
                '.bkp' not in arquivo and
                '.backup' not in arquivo):
                arquivos.append(arquivo)
        
        # Ordenar arquivos alfabeticamente
        arquivos.sort()
        
        log_info(f"Processando {diretorio_path}: {len(arquivos)} arquivos encontrados")
        
        # Gerar cards HTML
        cards = []
        for arquivo in arquivos:
            titulo = obter_titulo_arquivo(arquivo)
            # Link sem extens√£o .md (padr√£o MkDocs Material)
            link = arquivo.replace('.md', '')
            
            card_html = f"""<a class="doc-card" href="{link}">
  <div class="doc-icon">{SVG_DOC}</div>
  <div class="doc-title">{titulo}</div>
</a>"""
            cards.append(card_html)
        
        # Montar conte√∫do do index
        conteudo = []
        
        # Adicionar introdu√ß√£o se configurado
        if config.get("incluir_intro", False):
            conteudo.append(INTRO_DOCUMENTACAO)
        else:
            # Adicionar t√≠tulo e descri√ß√£o personalizados
            conteudo.append(f"# {config['titulo']}\n")
            if config.get("descricao"):
                conteudo.append(f"{config['descricao']}\n")
            conteudo.append("---\n")
        
        # Adicionar cards se houver arquivos
        if cards:
            cards_html = '<div class="cards-container">\n' + '\n'.join(cards) + '\n</div>'
            conteudo.append(cards_html)
        else:
            conteudo.append("*Nenhum documento dispon√≠vel nesta se√ß√£o.*")
        
        # Escrever arquivo
        index_path = os.path.join(diretorio_path, "index.md")
        with open(index_path, "w", encoding="utf-8") as f:
            f.write('\n'.join(conteudo))
        
        log_info(f"‚úÖ Gerado: {index_path} ({len(arquivos)} arquivos)")
        return True
        
    except Exception as e:
        log_info(f"‚ùå Erro ao processar {diretorio_path}: {e}")
        return False

def gerar_todos_indexes():
    """
    Gera √≠ndices para todos os diret√≥rios configurados
    """
    log_info("üöÄ Iniciando gera√ß√£o de √≠ndices...")
    
    # Verificar se estamos no diret√≥rio correto
    if not os.path.exists(DOCS_DIR):
        log_info(f"‚ùå Diret√≥rio {DOCS_DIR} n√£o encontrado!")
        return False
    
    sucessos = 0
    total = 0
    
    # Processar cada diret√≥rio configurado
    for nome_dir, config in DIRETORIOS_CONFIG.items():
        total += 1
        dir_path = os.path.join(DOCS_DIR, nome_dir)
        
        if os.path.exists(dir_path) and os.path.isdir(dir_path):
            if gerar_index_md(dir_path, config):
                sucessos += 1
        else:
            log_info(f"‚ö†Ô∏è  Diret√≥rio n√£o encontrado: {dir_path}")
    
    # Processar diret√≥rios n√£o configurados (com configura√ß√£o padr√£o)
    for item in os.listdir(DOCS_DIR):
        dir_path = os.path.join(DOCS_DIR, item)
        if (os.path.isdir(dir_path) and 
            item not in DIRETORIOS_CONFIG and 
            item != "assets" and 
            not item.startswith(".")):
            
            total += 1
            config_padrao = {
                "titulo": f"üìÅ {item.replace('_', ' ').replace('-', ' ').title()}",
                "descricao": f"Documenta√ß√£o da se√ß√£o {item}.",
                "incluir_intro": False
            }
            
            if gerar_index_md(dir_path, config_padrao):
                sucessos += 1
    
    log_info(f"üéØ Conclu√≠do: {sucessos}/{total} √≠ndices gerados com sucesso")
    return sucessos == total

def gerar_index_especifico(diretorio):
    """
    Gera √≠ndice para um diret√≥rio espec√≠fico
    Usado pela automa√ß√£o do painel
    """
    log_info(f"üéØ Gerando √≠ndice espec√≠fico para: {diretorio}")
    
    # Determinar caminho do diret√≥rio
    if diretorio == "" or diretorio == ".":
        # Diret√≥rio raiz - n√£o gerar index autom√°tico
        log_info("‚ö†Ô∏è  Diret√≥rio raiz - pulando gera√ß√£o autom√°tica")
        return True
    
    dir_path = os.path.join(DOCS_DIR, diretorio)
    
    if not os.path.exists(dir_path):
        log_info(f"‚ùå Diret√≥rio n√£o encontrado: {dir_path}")
        return False
    
    # Usar configura√ß√£o espec√≠fica ou padr√£o
    config = DIRETORIOS_CONFIG.get(diretorio, {
        "titulo": f"üìÅ {diretorio.replace('_', ' ').replace('-', ' ').title()}",
        "descricao": f"Documenta√ß√£o da se√ß√£o {diretorio}.",
        "incluir_intro": False
    })
    
    return gerar_index_md(dir_path, config)

if __name__ == "__main__":
    # Verificar argumentos da linha de comando
    if len(sys.argv) > 1:
        # Gerar √≠ndice espec√≠fico
        diretorio = sys.argv[1]
        sucesso = gerar_index_especifico(diretorio)
        sys.exit(0 if sucesso else 1)
    else:
        # Gerar todos os √≠ndices
        log_info("Diret√≥rio atual: " + os.getcwd())
        sucesso = gerar_todos_indexes()
        sys.exit(0 if sucesso else 1)

